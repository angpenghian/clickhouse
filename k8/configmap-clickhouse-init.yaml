apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-init-script
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS default.otel_logs (
        `Timestamp` DateTime64(9) CODEC(Delta(8), ZSTD(1)),
        `TimestampTime` DateTime DEFAULT toDateTime(Timestamp),
        `TraceId` String CODEC(ZSTD(1)),
        `SpanId` String CODEC(ZSTD(1)),
        `TraceFlags` UInt8,
        `SeverityText` LowCardinality(String) CODEC(ZSTD(1)),
        `SeverityNumber` UInt8,
        `ServiceName` LowCardinality(String) CODEC(ZSTD(1)),
        `Body` String CODEC(ZSTD(1)),
        `ResourceSchemaUrl` LowCardinality(String) CODEC(ZSTD(1)),
        `ResourceAttributes` Map(LowCardinality(String), String) CODEC(ZSTD(1)),
        `ScopeSchemaUrl` LowCardinality(String) CODEC(ZSTD(1)),
        `ScopeName` String CODEC(ZSTD(1)),
        `ScopeVersion` LowCardinality(String) CODEC(ZSTD(1)),
        `ScopeAttributes` Map(LowCardinality(String), String) CODEC(ZSTD(1)),
        `LogAttributes` Map(LowCardinality(String), String) CODEC(ZSTD(1)),

        INDEX idx_trace_id TraceId TYPE bloom_filter(0.001) GRANULARITY 1,
        INDEX idx_res_attr_key mapKeys(ResourceAttributes) TYPE bloom_filter(0.01) GRANULARITY 1,
        INDEX idx_res_attr_value mapValues(ResourceAttributes) TYPE bloom_filter(0.01) GRANULARITY 1,
        INDEX idx_scope_attr_key mapKeys(ScopeAttributes) TYPE bloom_filter(0.01) GRANULARITY 1,
        INDEX idx_scope_attr_value mapValues(ScopeAttributes) TYPE bloom_filter(0.01) GRANULARITY 1,
        INDEX idx_log_attr_key mapKeys(LogAttributes) TYPE bloom_filter(0.01) GRANULARITY 1,
        INDEX idx_log_attr_value mapValues(LogAttributes) TYPE bloom_filter(0.01) GRANULARITY 1,
        INDEX idx_body Body TYPE tokenbf_v1(32768, 3, 0) GRANULARITY 8
    )
    ENGINE = MergeTree()
    PARTITION BY toDate(TimestampTime)
    PRIMARY KEY (ServiceName, TimestampTime)
    ORDER BY (ServiceName, TimestampTime, Timestamp)
    TTL TimestampTime + toIntervalHour(12)
    SETTINGS index_granularity = 8192;

  entrypoint.sh: |
    #!/bin/sh
    # Start ClickHouse server with custom parameters
    /usr/bin/clickhouse-server --config-file=/etc/clickhouse-server/config.xml &
    # Wait for the server to be ready
    until clickhouse-client -q "SELECT 1"; do
      echo "Waiting for ClickHouse server to be ready..."
      sleep 1
    done
    echo "ClickHouse server is ready. Running initialization script..."
    # Run the initialization script
    clickhouse-client -n < /docker-entrypoint-initdb.d/init.sql
    echo "Initialization script executed."
    # Wait for background processes
    wait
